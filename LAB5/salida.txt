========= clock.c =========
/* clock.c */
/* Código para configurar el reloj del sistema y temporización */

#include <libopencm3/stm32/rcc.h>
#include <libopencm3/cm3/systick.h>
#include "clock.h"

/* Variable para contar los milisegundos desde el arranque */
static volatile uint32_t system_millis;

/* Handler para SysTick */
void sys_tick_handler(void)
{
    system_millis++;
}

/* Función para esperar un número de milisegundos */
void msleep(uint32_t delay)
{
    uint32_t wake = system_millis + delay;
    while (wake > system_millis);
}

/* Función para obtener el tiempo en milisegundos desde el arranque */
uint32_t mtime(void)
{
    return system_millis;
}

/* Configuración del reloj del sistema y SysTick */
void clock_setup(void)
{
    /* Configurar el reloj del sistema a 168 MHz */
    rcc_clock_setup_pll(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_168MHZ]);

    /* Configurar SysTick para generar interrupciones cada 1 ms */
    systick_set_reload(168000);  // 168 MHz / 168000 = 1000 Hz (1 ms)
    systick_set_clocksource(STK_CSR_CLKSOURCE_AHB);
    systick_counter_enable();
    systick_interrupt_enable();
}


========= clock.h =========
/* clock.h */
/* Archivo de cabecera para la configuración del reloj y temporización */

#ifndef __CLOCK_H
#define __CLOCK_H

#include <stdint.h>

/* Función para configurar el reloj del sistema y SysTick */
void clock_setup(void);

/* Función para esperar un número de milisegundos */
void msleep(uint32_t delay);

/* Función para obtener el tiempo en milisegundos desde el arranque */
uint32_t mtime(void);

/* Handler para SysTick */
void sys_tick_handler(void);

#endif /* __CLOCK_H */


========= console.c =========
/* console.c */
/* Código para configurar la consola y permitir el uso de printf */

#include <libopencm3/stm32/usart.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/rcc.h>
#include "console.h"
#include <stdio.h>
#include <errno.h>
#include <unistd.h>

/* Definición del USART para la consola */
#define CONSOLE_USART USART1

void console_setup(void)
{
    /* Habilitar reloj para GPIOA (pines de USART1) y USART1 */
    rcc_periph_clock_enable(RCC_GPIOA);
    rcc_periph_clock_enable(RCC_USART1);

    /* Configurar pin GPIO para USART1 TX (PA9) */
    gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO9);
    gpio_set_af(GPIOA, GPIO_AF7, GPIO9);

    /* Configurar parámetros del USART1 */
    usart_set_baudrate(CONSOLE_USART, 115200);
    usart_set_databits(CONSOLE_USART, 8);
    usart_set_stopbits(CONSOLE_USART, USART_STOPBITS_1);
    usart_set_mode(CONSOLE_USART, USART_MODE_TX);
    usart_set_parity(CONSOLE_USART, USART_PARITY_NONE);
    usart_set_flow_control(CONSOLE_USART, USART_FLOWCONTROL_NONE);

    /* Habilitar USART1 */
    usart_enable(CONSOLE_USART);
}

/* Implementación de _write para redirigir printf al USART */
int _write(int file, char *ptr, int len)
{
    int i;

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
    {
        for (i = 0; i < len; i++)
        {
            if (ptr[i] == '\n')
            {
                usart_send_blocking(CONSOLE_USART, '\r');
            }
            usart_send_blocking(CONSOLE_USART, ptr[i]);
        }
        return i;
    }
    errno = EIO;
    return -1;
}


========= console.h =========
/* console.h */
/* Archivo de cabecera para la configuración de la consola y uso de printf */

#ifndef __CONSOLE_H
#define __CONSOLE_H

/* Función para configurar la consola USART */
void console_setup(void);
int _write(int file, char *ptr, int len);

#endif /* __CONSOLE_H */


========= gyro.c =========
/* gyro.c */
/* Código para configurar y leer datos del giroscopio mediante SPI */

#include <libopencm3/stm32/spi.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/rcc.h>
#include "gyro.h"
#include "clock.h" // Para usar msleep

/* Definiciones de pines y periféricos para el giroscopio */
#define GYRO_SPI        SPI5
#define GYRO_SPI_RCC    RCC_SPI5
#define GYRO_GPIO_PORT  GPIOF
#define GYRO_GPIO_RCC   RCC_GPIOF
#define GYRO_CS_PORT    GPIOC
#define GYRO_CS_RCC     RCC_GPIOC
#define GYRO_SCK        GPIO7   /* PF7 */
#define GYRO_MISO       GPIO8   /* PF8 */
#define GYRO_MOSI       GPIO9   /* PF9 */
#define GYRO_CS         GPIO1   /* PC1 */

/* Direcciones de registros del giroscopio */
#define WHO_AM_I        0x0F
#define CTRL_REG1       0x20
#define CTRL_REG4       0x23
#define OUT_X_L         0x28
#define READ_FLAG       0x80

/* Offsets para calibración */
static int16_t offset[3] = {0, 0, 0}; // Offsets para X, Y, Z

/* Prototipos de funciones internas */
static void gyro_write_register(uint8_t reg, uint8_t value);
static uint8_t gyro_read_register(uint8_t reg);

/* Función para configurar el giroscopio */
void gyro_setup(void)
{
    /* Habilitar relojes para SPI y GPIO */
    rcc_periph_clock_enable(GYRO_SPI_RCC);
    rcc_periph_clock_enable(GYRO_GPIO_RCC);
    rcc_periph_clock_enable(GYRO_CS_RCC);

    /* Configurar pines GPIO para SPI5: SCK, MISO, MOSI */
    gpio_mode_setup(GYRO_GPIO_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE,
                    GYRO_SCK | GYRO_MISO | GYRO_MOSI);
    gpio_set_af(GYRO_GPIO_PORT, GPIO_AF5, GYRO_SCK | GYRO_MISO | GYRO_MOSI);

    /* Configurar pin GPIO para CS */
    gpio_mode_setup(GYRO_CS_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GYRO_CS);
    gpio_set(GYRO_CS_PORT, GYRO_CS); // CS inactivo (alto)

    /* Configurar parámetros del SPI */
    spi_set_unidirectional_mode(GYRO_SPI);         // Modo unidireccional de 2 líneas
    spi_disable_crc(GYRO_SPI);                     // Deshabilitar cálculo CRC
    spi_set_dff_8bit(GYRO_SPI);                    // Tamaño de datos de 8 bits
    spi_set_full_duplex_mode(GYRO_SPI);            // Comunicación full duplex
    spi_enable_software_slave_management(GYRO_SPI);
    spi_set_nss_high(GYRO_SPI);                    // NSS en alto
    spi_set_baudrate_prescaler(GYRO_SPI, SPI_CR1_BR_FPCLK_DIV_64); // Velocidad del SPI
    spi_set_master_mode(GYRO_SPI);                 // Modo maestro
    spi_set_clock_polarity_0(GYRO_SPI);            // CPOL = 0
    spi_set_clock_phase_1(GYRO_SPI);               // CPHA = 1
    spi_enable(GYRO_SPI);                          // Habilitar SPI

    /* Verificar la identidad del giroscopio */
    uint8_t who_am_i = gyro_read_register(WHO_AM_I);
    if (who_am_i != 0xD4)
    {
        // Giroscopio no detectado
        while (1);
    }

    /* Configurar registros del giroscopio */
    gyro_write_register(CTRL_REG1, 0x0F); // Habilitar ejes, modo normal, data rate de 95 Hz
    gyro_write_register(CTRL_REG4, 0x00); // Actualización continua, escala de 250 dps
}

/* Función para calibrar el giroscopio */
void gyro_calibrate(void)
{
    int32_t sum[3] = {0, 0, 0};
    int16_t x, y, z;

    for (int i = 0; i < 100; i++)
    {
        gyro_read_xyz(&x, &y, &z);
        sum[0] += x;
        sum[1] += y;
        sum[2] += z;
        msleep(10);
    }

    offset[0] = sum[0] / 100;
    offset[1] = sum[1] / 100;
    offset[2] = sum[2] / 100;
}

/* Función para leer los ejes X, Y, Z del giroscopio */
void gyro_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
    uint8_t data[6];

    gpio_clear(GYRO_CS_PORT, GYRO_CS); // CS bajo

    /* Leer múltiples bytes desde OUT_X_L con auto-incremento */
    spi_send(GYRO_SPI, READ_FLAG | 0x40 | OUT_X_L);
    spi_read(GYRO_SPI); // Lectura dummy

    for (int i = 0; i < 6; i++)
    {
        spi_send(GYRO_SPI, 0x00); // Escritura dummy
        data[i] = spi_read(GYRO_SPI);
    }

    gpio_set(GYRO_CS_PORT, GYRO_CS); // CS alto

    /* Combinar bytes altos y bajos, y restar offset */
    *x = (int16_t)(data[1] << 8 | data[0]) - offset[0];
    *y = (int16_t)(data[3] << 8 | data[2]) - offset[1];
    *z = (int16_t)(data[5] << 8 | data[4]) - offset[2];
}

/* Función interna para leer un registro del giroscopio */
static uint8_t gyro_read_register(uint8_t reg)
{
    uint8_t value;

    gpio_clear(GYRO_CS_PORT, GYRO_CS); // CS bajo

    spi_send(GYRO_SPI, READ_FLAG | reg);
    spi_read(GYRO_SPI); // Lectura dummy

    spi_send(GYRO_SPI, 0x00); // Escritura dummy
    value = spi_read(GYRO_SPI);

    gpio_set(GYRO_CS_PORT, GYRO_CS); // CS alto

    return value;
}

/* Función interna para escribir en un registro del giroscopio */
static void gyro_write_register(uint8_t reg, uint8_t value)
{
    gpio_clear(GYRO_CS_PORT, GYRO_CS); // CS bajo

    spi_send(GYRO_SPI, reg);
    spi_read(GYRO_SPI); // Lectura dummy

    spi_send(GYRO_SPI, value);
    spi_read(GYRO_SPI); // Lectura dummy

    gpio_set(GYRO_CS_PORT, GYRO_CS); // CS alto
}


========= gyro.h =========
/* gyro.h */
/* Archivo de cabecera para la configuración y lectura del giroscopio */

#ifndef GYRO_H
#define GYRO_H

#include <stdint.h>

/* Función para configurar el giroscopio */
void gyro_setup(void);

/* Función para calibrar el giroscopio */
void gyro_calibrate(void);

/* Función para leer los ejes X, Y, Z del giroscopio */
void gyro_read_xyz(int16_t *x, int16_t *y, int16_t *z);

#endif /* GYRO_H */


========= gyroProject.c =========
/* main.c */
/* Programa principal que inicializa el sistema y muestra los datos del giroscopio */

#include "clock.h"
#include "console.h"
#include "gyro.h"
#include <stdio.h>

int main(void)
{
    int16_t x, y, z;
    float sensitivity = 9e-3; // Sensibilidad para ±250 dps
    float x_rate, y_rate, z_rate;

    /* Inicializar el sistema */
    clock_setup();
    console_setup();
    gyro_setup();

    /* Calibrar el giroscopio */
    gyro_calibrate();

    /* Bucle principal */
    while (1)
    {
        /* Leer datos del giroscopio */
        gyro_read_xyz(&x, &y, &z);

        /* Convertir a velocidades angulares */
        x_rate = x * sensitivity;
        y_rate = y * sensitivity;
        z_rate = z * sensitivity;

        /* Mostrar los valores */
        printf("%.2f,%.2f,%.2f\n", x_rate, y_rate, z_rate);

        msleep(100); // Esperar 100 ms
    }

    return 0;
}


========= Makefile =========
# Makefile
# Archivo de construcción para compilar el proyecto del giroscopio utilizando libopencm3

# Lista de archivos objeto
OBJS = clock.o console.o gyro.o

# Nombre del binario
BINARY = gyroProject

# Estándar de C a utilizar
CSTD = -std=gnu99

# Si utilizas funciones matemáticas como sin/cos (puedes eliminar esta línea si no las usas)
LDLIBS += -lm

# Script de enlace y ruta a libopencm3
LDSCRIPT = makeHeaders/stm32f429i-discovery.ld
OPENCM3_DIR = /home/pompo/Universidad/LABmicrocontroladores/libopencm3

# Incluir las reglas y configuraciones comunes
include makeHeaders/Makefile.include


========= quemar.sh =========
#!/usr/bin/bash
make
arm-none-eabi-objcopy -O binary gyroProject.elf firmware.bin # el .elf se tiene que convertir a .bin con esta linea
st-flash --reset write firmware.bin 0x8000000 # esta linea es para montar el binario en el micro controlador 
rm *.d *.elf *.map *.o *.bin

